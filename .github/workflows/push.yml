name: Build and Deploy Artifact

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      ARTIFACT_NAME: lambdaDeploymentArtifact
      CODE_DEPLOY_APPLICATION_NAME: csye6225-serverless
      CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME: csye6225-serverless-deployment
      CODEDEPLOY_DEPLOYMENT_CONFIG_NAME: CodeDeployDefault.LambdaAllAtOnce

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Create Lambda deployment artifact
        run:  |
              sudo mkdir codedeploy_artifact
              zip ${{env.ARTIFACT_NAME}} myDateTimeFunction.js beforeAllowTraffic.js afterAllowTraffic.js appspec.yml
              sudo mv ${{env.ARTIFACT_NAME}}.zip ./codedeploy_artifact
              sudo ls ./codedeploy_artifact/appspec.yaml

      - name: Configure AWS Credentials
        run:  |
          aws --version
          aws configure set aws_access_key_id ${{secrets.AWS_ACCESS_KEY}}
          aws configure set aws_secret_access_key ${{secrets.AWS_SECRET}}
          aws configure set default.region ${{env.AWS_REGION}}

      - name: Upload artifact to s3
        run: aws s3 sync ./codedeploy_artifact s3://${{secrets.AWS_S3_ARTIFACT_BUCKET_NAME}}
      # - name: CodeDeploy API Call
      #   run: sam package --template-file template.yml --output-template-file package.yml --s3-bucket ${{secrets.codedeploy_bucket_name}}

      # - name: Deploy lambda
      #   run: sam deploy --template-file package.yml --stack-name my-date-time-app --capabilities CAPABILITY_IAM
      - name: CodeDeploy API Call
        run: |
              output=$(aws deploy create-deployment --application-name ${{env.CODE_DEPLOY_APPLICATION_NAME}} --deployment-config-name ${{env.CODEDEPLOY_DEPLOYMENT_CONFIG_NAME}} --deployment-group-name ${{env.CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME}} --description "CSYE6225 - Deploy Lambda Function" --s3-location bucket=${{secrets.AWS_S3_ARTIFACT_BUCKET_NAME}},key="${{env.ARTIFACT_NAME}}.zip", bundleType=zip --region ${{env.AWS_REGION}} --output json)
              echo $output
              dID=$(echo $output | jq -r '.deploymentId')
              aws deploy wait deployment-successful --deployment-id $dID